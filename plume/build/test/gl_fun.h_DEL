 

#include <GL/glew.h>
#if defined (_WIN32)
#include <GL/wglew.h>
#endif
#if defined(__APPLE__) || defined(__MACOSX)
#include <GLUT/glut.h>
#else
#include <GL/freeglut.h>
#endif

// CUDA utilities and system includes
#include <cutil_inline.h>    // includes cuda.h and cuda_runtime_api.h
#include <cutil_gl_inline.h> // includes cuda_gl_interop.h// includes cuda_gl_interop.h
#include <rendercheck_gl.h>
#include <cutil_math.h>

// Includes
#include <stdlib.h>
#include <cstdlib>
#include <cstdio>
#include <algorithm>

#include "plumeSystem.h"
#include "Shader/Particle/render_particles.h"
#include "paramgl.h"
#include "util/handleQUICArgs.h"
#include "quicutil/QUICProject.h"
 
 
#define NUM_PARTICLES   pow(2,10)  
#define MAX(a,b) ((a > b) ? a : b)
 
 extern "C"
{ 

const uint width = 800, height = 600;

// view params
int ox, oy;
bool keyDown[256];
int buttonState = 0;
float3 campos = make_float3(3.810398f, -9.522257f, -11.32808f); 
float camera_trans[] = {0, 0, 3};
float3 camera_rot   = make_float3(0.f, 0.f, 0.f);//{0, 0, 0};
float camera_trans_lag[] = {0, 0, 3};
float3 camera_rot_lag = make_float3(0.f, 0.f, 0.f);//{0, 0, 0};
const float inertia = .3f;
const float walkSpeed = 0.1f;
ParticleRenderer::DisplayMode displayMode = ParticleRenderer::PARTICLE_SPHERES;

//hard coding default values
Building building1;
float3 lowCorner = make_float3(3.f, -2.f, 3.f);
float3 highCorner = make_float3(8.f,  1.f, 8.f); 
GLuint buldingTex = 0;
GLuint roofTex = 0;

float3 domain = make_float3(40.f, 25.f, 26.f); 
float3 origin = make_float3(0.f, 0.f, 0.f); 
// float3 sourceOrigin = make_float3(10.0f, 12.5f, .5f);
Source source;
GLuint floorTex = 0; 



int mode = 0;
bool displayEnabled = true;
bool bPause = false;
bool displaySliders = false;  
int idleCounter = 0;
int demoCounter = 0;
float modelView[16];//for camera moving 


enum { M_VIEW = 0, M_MOVE };

uint numParticles = 0;
uint3 gridSize;
int numIterations = 0; // run until exit

// simulation parameters
float timestep = 0.5f;
float damping = 1.0f;
float gravity = 0.0003f;
int iterations = 1;
int ballr = 10;


// fps
static int fpsCount = 0;
static int fpsLimit = 1;
unsigned int timer;
unsigned int frameCount = 0;   

// CheckFBO/BackBuffer class objects
CheckRender       *g_CheckRender = NULL;
PlumeSystem *psystem = 0;
ParticleRenderer *renderer = 0;  
bool bUseOpenGL = true;  

sivelab::QUICProject *data = 0;
  
extern "C" void cudaInit(int argc, char **argv);
extern "C" void cudaGLInit(int argc, char **argv);
extern "C" void copyArrayFromDevice(void* host, const void* device, unsigned int vbo, int size);
  
// initialize particle system
void initPlumeSystem(uint numParticles, uint3 gridSize, float4* &cellData)
{ 
  Building building;
  building.lowCorner = lowCorner; 
  building.highCorner = highCorner;  
  psystem = new PlumeSystem(numParticles, gridSize, bUseOpenGL, building, domain, origin,
			       source, cellData);  
  psystem->reset(); 

  if (bUseOpenGL) {
    renderer = new ParticleRenderer;
    renderer->setParticleRadius(psystem->getParticleRadius());
    renderer->setColorBuffer(psystem->getColorBuffer());
  }

  cutilCheckError(cutCreateTimer(&timer));
}

void cleanup() 
{
  cutilCheckError( cutDeleteTimer( timer));
  
  if (buldingTex)  glDeleteTextures(1, &buldingTex);
  if (roofTex)  glDeleteTextures(1, &roofTex);
  if (floorTex)  glDeleteTextures(1, &floorTex);

  if (g_CheckRender) {
    delete g_CheckRender; g_CheckRender = NULL;
  }
}


GLuint createTexture(GLenum target, GLint internalformat, GLenum format, int w, int h, void *data)
{
  GLuint tex;
  glGenTextures(1, &tex);
  glBindTexture(target, tex);
  glTexParameteri(target, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
  glTexParameteri(target, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
  glTexParameteri(target, GL_TEXTURE_WRAP_S, GL_REPEAT);
  glTexParameteri(target, GL_TEXTURE_WRAP_T, GL_REPEAT);
  glTexParameteri(target, GL_GENERATE_MIPMAP_SGIS, GL_TRUE);
  glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
  glTexImage2D(target, 0, internalformat, w, h, 0, format, GL_UNSIGNED_BYTE, data);
  return tex;
} 

GLuint loadTexture(char *filename)
{
  unsigned char *data = 0;
  unsigned int width, height;
  cutilCheckError( cutLoadPPM4ub(filename, &data, &width, &height));
  if (!data) {
    printf("Error opening file '%s'\n", filename);
    return 0;
  } 

  return createTexture(GL_TEXTURE_2D, GL_RGBA8, GL_RGBA, width, height, data);
}

// initialize OpenGL
void initGL(int *argc, char **argv)
{  
  glutInit(argc, argv);
  glutInitDisplayMode(GLUT_RGB | GLUT_DEPTH | GLUT_DOUBLE);
  glutInitWindowSize(width, height);
  glutCreateWindow("CUDA Particles");

  glewInit();
  if (!glewIsSupported("GL_VERSION_2_0 GL_VERSION_1_5 GL_ARB_multitexture GL_ARB_vertex_buffer_object")) {
    fprintf(stderr, "Required OpenGL extensions missing.");
    exit(-1);
  }
  
// load  textures
  char* imagePath = cutFindFilePath("building.ppm", argv[0]);
  char* imagePath1 = cutFindFilePath("buildingRoof.ppm", argv[0]);
  char* imagePath2 = cutFindFilePath("concrete.ppm", argv[0]);
  if (imagePath == NULL) {
    fprintf(stderr, "Error finding floor image file\n"); 
  }
  buldingTex = loadTexture(imagePath);
  roofTex = loadTexture(imagePath1);
  floorTex = loadTexture(imagePath2);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAX_ANISOTROPY_EXT, GL_REPEAT);

#if defined (_WIN32)
  if (wglewIsSupported("WGL_EXT_swap_control")) {
      // disable vertical sync
    wglSwapIntervalEXT(0);
  }
#endif

  glEnable(GL_DEPTH_TEST);
  glClearColor(0.25, 0.25, 0.25, 1.0);

  glutReportErrors();
}
 
 
void computeFPS()
{
  frameCount++;
  fpsCount++; 
  if (fpsCount == fpsLimit) {
    char fps[256];
    float ifps = 1.f / (cutGetAverageTimerValue(timer) / 1000.f);
    sprintf(fps, "%s CUDA Plume (%d particles): %3.1f fps", 
	    ((g_CheckRender && g_CheckRender->IsQAReadback()) ? "AutoTest: " : ""), numParticles, ifps);  

    glutSetWindowTitle(fps);
    fpsCount = 0; 
    if (g_CheckRender && !g_CheckRender->IsQAReadback()) 
      fpsLimit = (int)MAX(ifps, 1.f);

    cutilCheckError(cutResetTimer(timer));   
  }
}

void drawBuildings(float3 lowCorner, float3 highCorner) 
{ 
  glPushMatrix(); 
  glEnable(GL_TEXTURE_2D);
  glBindTexture(GL_TEXTURE_2D,buldingTex);
  glBegin(GL_QUADS);
    glTexCoord2f(0.0f,0.0f);glVertex3f(lowCorner.x,lowCorner.y,lowCorner.z);
    glTexCoord2f(0.0f,1.0f);glVertex3f(lowCorner.x,lowCorner.y,highCorner.z);
    glTexCoord2f(1.0f,1.0f);glVertex3f(highCorner.x,lowCorner.y,highCorner.z);
    glTexCoord2f(1.0f,0.0f);glVertex3f(highCorner.x,lowCorner.y,lowCorner.z);
    
    glTexCoord2f(0.0f,0.0f);glVertex3f(highCorner.x,lowCorner.y,lowCorner.z);
    glTexCoord2f(0.0f,1.0f);glVertex3f(highCorner.x,lowCorner.y,highCorner.z);
    glTexCoord2f(1.0f,1.0f);glVertex3f(highCorner.x,highCorner.y,highCorner.z);
    glTexCoord2f(1.0f,0.0f);glVertex3f(highCorner.x,highCorner.y,lowCorner.z);
      
    glTexCoord2f(0.0f,0.0f);glVertex3f(highCorner.x,highCorner.y,lowCorner.z);
    glTexCoord2f(0.0f,1.0f);glVertex3f(highCorner.x,highCorner.y,highCorner.z);
    glTexCoord2f(1.0f,1.0f);glVertex3f(lowCorner.x,highCorner.y,highCorner.z);
    glTexCoord2f(1.0f,0.0f);glVertex3f(lowCorner.x,highCorner.y,lowCorner.z);
    
    glTexCoord2f(0.0f,0.0f);glVertex3f(lowCorner.x,highCorner.y,lowCorner.z);
    glTexCoord2f(0.0f,1.0f);glVertex3f(lowCorner.x,highCorner.y,highCorner.z);
    glTexCoord2f(1.0f,1.0f);glVertex3f(lowCorner.x,lowCorner.y,highCorner.z);
    glTexCoord2f(1.0f,0.0f);glVertex3f(lowCorner.x,lowCorner.y,lowCorner.z);
  glEnd();  
  
  glEnable(GL_TEXTURE_2D);
  glBindTexture(GL_TEXTURE_2D,roofTex);
  glBegin(GL_QUADS); 
    glTexCoord2f(0.0f,0.0f);glVertex3f(lowCorner.x,lowCorner.y,highCorner.z);
    glTexCoord2f(0.0f,1.0f);glVertex3f(lowCorner.x,highCorner.y,highCorner.z);
    glTexCoord2f(1.0f,1.0f);glVertex3f(highCorner.x,highCorner.y,highCorner.z);
    glTexCoord2f(1.0f,0.0f);glVertex3f(highCorner.x,lowCorner.y,highCorner.z);
  glEnd();
  glPopMatrix();  
}


void drawFloor(float3 domainP, float3 originP)
{
  glPushMatrix(); 
  glEnable(GL_TEXTURE_2D);
  glBindTexture(GL_TEXTURE_2D,floorTex);
  glBegin(GL_QUADS); 
    glTexCoord2f(0.0f,0.0f);glVertex3f(originP.x, originP.y, originP.z);
    glTexCoord2f(0.0f,1.0f);glVertex3f(originP.x, domainP.y, originP.z);
    glTexCoord2f(1.0f,1.0f);glVertex3f(domainP.x, domainP.y, originP.z);
    glTexCoord2f(1.0f,0.0f);glVertex3f(domainP.x, originP.y, originP.z);
    
//     glTexCoord2f(0.0f,0.0f);glVertex3f(originP.x, originP.y, domainP.z);
//     glTexCoord2f(0.0f,1.0f);glVertex3f(originP.x, domainP.y, domainP.z);
//     glTexCoord2f(1.0f,1.0f);glVertex3f(domainP.x, domainP.y, domainP.z);
//     glTexCoord2f(1.0f,0.0f);glVertex3f(domainP.x, originP.y, domainP.z);
  glEnd();
  glPopMatrix(); 
}

void drawSphere()
{ 

  glPushMatrix();
  glColor4f(1.0, 1.0, 0.0, .1f);
  glTranslatef(0.f, 0.f, 0.f);//(xpos,ypos,zpos);
  glutSolidSphere(1.f, 20, 16); 
  glPopMatrix();

  glPushMatrix();
  glColor4f(.0, 1.0, 0.0, .1f);
  glTranslatef(5.f, 0.f, 0.f);//(xpos,ypos,zpos);
  glutSolidSphere(.25f, 20, 16);
  glPopMatrix();

  glPushMatrix();
  glColor4f(.0, 0.0, 1.0, .1f);
  glTranslatef(20.f, 0.f, 20.f);//(xpos,ypos,zpos);
  //glTranslatef(-6.f, 0.f, 5.f);//(xpos,ypos,zpos);
  glutSolidSphere(1.25f, 20, 16); 
  glPopMatrix();

  glPushMatrix();
  glColor4f(1.0, 0.0, 0.0, .1f);
  glTranslatef(0.f, 20.f, 0.f);//(xpos,ypos,zpos);
  glutSolidSphere(1.25f, 20, 16); 
  glPopMatrix();

  glPushMatrix();
  glColor4f(.0, 1.0, 0.0, .1f);
  glTranslatef(20.f, 20.f, 0.f);//(xpos,ypos,zpos);
  glutSolidSphere(1.25f, 20, 16);
  glPopMatrix();

  glPushMatrix();
  glColor4f(.0, 0.0, 1.0, .1f);
  glTranslatef(20.f, 20.f, 20.f);//(xpos,ypos,zpos);
  //glTranslatef(-6.f, 0.f, 5.f);//(xpos,ypos,zpos);
  glutSolidSphere(1.25f, 20, 16); 
  glPopMatrix(); 
}
void display()
{
  cutilCheckError(cutStartTimer(timer));   
  // update the simulation
  if (!bPause)
  {
    psystem->setIterations(iterations);
//     psystem->setDamping(damping);  
    psystem->update(timestep); 
    if (renderer) 
      renderer->setVertexBuffer(psystem->getCurrentReadBuffer(), psystem->getNumParticles());
  }

  // render
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);   

  // view transform 
  glMatrixMode(GL_MODELVIEW);
  glLoadIdentity(); 
  gluLookAt( 0, 25, 15,
	     0,  0,  0,
	     0,  0,  1);
  camera_rot_lag += (camera_rot - camera_rot_lag) * inertia;  
  glRotatef(camera_rot_lag.x, 1.0, 0.0, 0.0);
  glRotatef(camera_rot_lag.z, 0.0, 0.0, 1.0); 
  glTranslatef(campos.x, campos.y, campos.z); 
  glGetFloatv(GL_MODELVIEW_MATRIX, modelView);
  
  lowCorner = make_float3(-100, -100, -100);
  highCorner = make_float3(140,  125, 125);
  drawBuildings(lowCorner, highCorner);
  drawFloor(domain, origin);
//   drawSphere();
  
  if (renderer && displayEnabled)
  {
    renderer->display(displayMode);
  }

  if (displaySliders) {
    glDisable(GL_DEPTH_TEST);
    glBlendFunc(GL_ONE_MINUS_DST_COLOR, GL_ZERO); // invert color
    glEnable(GL_BLEND); 
    glDisable(GL_BLEND);
    glEnable(GL_DEPTH_TEST);
  }

  cutilCheckError(cutStopTimer(timer));   

  glutSwapBuffers();
  glutReportErrors();

  computeFPS();
//     glutPostRedisplay();
}


void reshape(int w, int h)
{
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  gluPerspective(60.0, (float) w / (float) h, 0.1, 100.0);

  glMatrixMode(GL_MODELVIEW);
  glViewport(0, 0, w, h);

  if (renderer) {
    renderer->setWindowSize(w, h);
    renderer->setFOV(60.0);
  }
}

void mouse(int button, int state, int x, int y)
{
  int mods;

  if (state == GLUT_DOWN)
    buttonState |= 1<<button;
  else if (state == GLUT_UP)
    buttonState = 0;

  mods = glutGetModifiers();
  if (mods & GLUT_ACTIVE_SHIFT) {
    buttonState = 2;
  } else if (mods & GLUT_ACTIVE_CTRL) {
    buttonState = 3;
  }

  ox = x; oy = y;
 
  idleCounter = 0;

  glutPostRedisplay();
}

// transfrom vector by matrix
void xform(float *v, float *r, GLfloat *m)
{
  r[0] = v[0]*m[0] + v[1]*m[4] + v[2]*m[8] + m[12];
  r[1] = v[0]*m[1] + v[1]*m[5] + v[2]*m[9] + m[13];
  r[2] = v[0]*m[2] + v[1]*m[6] + v[2]*m[10] + m[14];
} 

// transform vector by transpose of matrix
void ixform(float *v, float *r, GLfloat *m)
{
  r[0] = v[0]*m[0] + v[1]*m[1] + v[2]*m[2];
  r[1] = v[0]*m[4] + v[1]*m[5] + v[2]*m[6];
  r[2] = v[0]*m[8] + v[1]*m[9] + v[2]*m[10];
}

void ixformPoint(float *v, float *r, GLfloat *m)
{
  float x[4];
  x[0] = v[0] - m[12];
  x[1] = v[1] - m[13];
  x[2] = v[2] - m[14];
  x[3] = 1.0f;
  ixform(x, r, m);
}

void motion(int x, int y)
{
  float dx, dy;
  dx = (float)(x - ox);
  dy = (float)(y - oy);


  switch(mode) 
  {
  case M_VIEW:
    if (buttonState == 3) {
	// left+middle = zoom
      camera_trans[2] += (dy / 100.0f) * 0.5f * fabs(camera_trans[2]);
    } 
    else if (buttonState & 2) {
	// middle = translate
      camera_trans[0] += dx / 100.0f;
      camera_trans[1] -= dy / 100.0f;
    } 
    else if (buttonState & 1) {
	// left = rotate
      camera_rot.z -= dx / 5.0f;
      camera_rot.x -= dy / 5.0f;
    }
    break;

  case M_MOVE:
    { 
    }
    break;
  }

  ox = x; oy = y;
 
  idleCounter = 0;

  glutPostRedisplay();
}

// commented out to remove unused parameter warnings in Linux
void key(unsigned char key, int /*x*/, int /*y*/)
{
  switch (key) 
  { 
  case 13:
    psystem->update(timestep); 
    if (renderer)
	renderer->setVertexBuffer(psystem->getCurrentReadBuffer(), psystem->getNumParticles());
    break;
  case '\033': 
    printf("campos: %f   %f   %f   \n", campos.x, campos.y, campos.z );
    exit(0);
    break;
  case 'v':
    mode = M_VIEW;
    break; 
  case 'm':
    mode = M_MOVE;
    break;
  case 'p':
    displayMode = ( ParticleRenderer::DisplayMode)
		  ((displayMode + 1) % ParticleRenderer::PARTICLE_NUM_MODES);
    break;
  case 'z':
    psystem->dumpGrid();
    break;
  case 'u':
    psystem->dumpParticles(0, numParticles-1);//debugging
    break;

  case 'r':
    displayEnabled = !displayEnabled;
    break; 

  case 'h':
    displaySliders = !displaySliders;
    break;
  }
  keyDown[key] = true;
 
  idleCounter = 0;
  glutPostRedisplay();
}

void special(int k, int x, int y)
{
  
}

void idle(void)
{
  if (keyDown['w']) {
    // printf("adsfasdfasdf");
    campos.x += modelView[2] * walkSpeed;
    campos.y += modelView[6] * walkSpeed;
    campos.z += modelView[10] * walkSpeed;
  } else
  if (keyDown['s']) {
    campos.x -= modelView[2] * walkSpeed;
    campos.y -= modelView[6] * walkSpeed;
    campos.z -= modelView[10] * walkSpeed;
  } else
  if (keyDown['a']) {
    campos.x += modelView[0] * walkSpeed;
    campos.y += modelView[4] * walkSpeed;
    campos.z += modelView[8] * walkSpeed;
  } else
  if (keyDown['d']) {
    campos.x -= modelView[0] * walkSpeed;
    campos.y -= modelView[4] * walkSpeed;
    campos.z -= modelView[8] * walkSpeed;
  } else
  if (keyDown['e']) {
    campos.x += modelView[1] * walkSpeed;
    campos.y += modelView[5] * walkSpeed;
    campos.z += modelView[9] * walkSpeed;
  } else
  if (keyDown[' ']) {
    campos.x -= modelView[1] * walkSpeed;
    campos.y -= modelView[5] * walkSpeed;
    campos.z -= modelView[9] * walkSpeed;
  } 
  glutPostRedisplay();
}

void initParams()
{
}

void mainMenu(int i)
{
  key((unsigned char) i, 0, 0);
}

void initMenus()
{ 
}

void keyUp(unsigned char key, int /*x*/, int /*y*/)
{
  keyDown[key] = false;
}

  
  
  
  
  
  
  
  
}